#!/bin/sh
# Jack Hung
# 2008/11/26 (one day before Thanksgiving)
# Input: LLVM bitcode
# Output: Executable file
# Usage: link_llvm hello [hello.lbc [hello.exe]]

# Set up environment with default values
FIND_BENCH_DIR=1;
READ_PATHS="";

# Assume arguments valid
VALID_ARGS=1;

# Jack: bench_name and bitcode_name can be different (example: test.bc, test.lbc, test.x are all valid bitcode names)
# Get fixed argument(s)
if [ $# -ge 1 ]; then
  BENCHMARK="$1";
  shift;
  if [ $# -ge 1 ]; then
    BITCODE="$1";
    shift;
    if [ $# -ge 1 ]; then
      OUTPUT="$1";
      shift;
    else
      OUTPUT="$BENCHMARK.exe";
    fi
  else
    BITCODE="$BENCHMARK.linked.bc";
    OUTPUT="$BENCHMARK.exe";
  fi
else
  VALID_ARGS=0;
fi

# get options after fixed arguments
while [ $# -gt 0 -a $VALID_ARGS -eq 1 ]
do

# get the next option specified
    OPTION="$1"
    shift

    case $OPTION in

        # Allow different projects to be used
	-project)
	    if [ $# -eq 0 ]; then
               echo "Error: test_bench_info expects a name after -project"
               exit 1;
            fi
	    READ_PATHS="$READ_PATHS -project $1"
            shift;;

        # Allow an benchmark dir be specified
        -bench_dir|-path)
            if [ $# -eq 0 ]; then
               echo "Error: test_bench_info expects a name after -bench_dir"
               exit 1;
            fi
            BENCH_DIR="$1";
            # Make sure specified path exists
            if [ ! -d $BENCH_DIR ]; then
               echo "Error: Invalid directory specified with -bench_dir option:"
               echo "       '${BENCH_DIR}'"
               exit 1;
            fi
            # Explicitly specify bench dir
            READ_PATHS="-bench_dir ${BENCH_DIR} $READ_PATHS";
            FIND_BENCH_DIR=0;
            shift;;

        *)
            echo "Error: Unknown option '${OPTION}'"
            VALID_ARGS=0;;
    esac
done

if [ $VALID_ARGS -eq 0 ]; then
    echo "> Usage: link_llvm_smtx benchmark [bitcode_file [output_file]]";
    echo ">"
    echo "> This script generates an executable from a bitcode file, considering"
    echo "> LINKING_POSTOPTIONS in the benchmark's compile_info file."
    echo ">"
    echo "> The bitcode file is assumed to be in a subdirectory with the same"
    echo "> name as the benchmark. If a file name is not given, benchmark.linked.bc"
    echo "> is assumed. If an output name is not given, it will be benchmark.exe."
    exit 1;
fi;

############################################################################
#       Find the benchmark info
############################################################################

  # Find the benchmark dir if not user specified
  if [ $FIND_BENCH_DIR -eq 1 ]; then
    echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";
    echo "> Finding the info for ${BENCHMARK} using find_bench_dir";
    echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";
    echo " ";
    BENCH_DIR=`find_bench_dir ${BENCHMARK}`
    if test "$?" != 0; then
      echo " "
      echo "> Exiting: Could not find '${BENCHMARK}' using find_bench_dir!"
      echo "> Error message returned by find_bench_dir:"
      echo "$BENCH_DIR";
      exit 1;
    fi
    # Explicitly specify bench dir
    READ_PATHS="-bench_dir ${BENCH_DIR} $READ_PATHS";
  fi

  echo "> Testing the info for ${BENCHMARK} in:"
  echo ">   $BENCH_DIR"

############################################################################
#       Read the compile info
############################################################################
  echo " "
  echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";
  echo "> Reading compile_info for ${BENCHMARK} using read_compile_info";
  echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";
  echo " ";

  LINKING_POSTOPTIONS=`read_compile_info ${BENCHMARK} $READ_PATHS -linking_postoptions`;
  if test "$?" != 0; then 
     echo " "
     echo "> Exiting: Could not read linking postoptions using read_compile_info!"
     echo "> Error message returned by read_compile_info:"
     echo "$LINKING_POSTOPTIONS";
     exit 1;
  fi

  echo "> Linking Postoptions: $LINKING_POSTOPTIONS"

############################################################################
#       Linking benchmark using the compile info read
############################################################################
  echo " "
  echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";
  echo "> Linking ${BENCHMARK} using the platform/compile info read";
  echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";
  echo " ";

  echo "> llvm-ld -native -inline ${BENCHMARK}/${BITCODE} ${CORELAB_LIB_DIR}/sw_queue.bc ${CORELAB_LIB_DIR}/libtpool.so -lpthread $LINKING_POSTOPTIONS -o ${BENCHMARK}/${OUTPUT}"
          llvm-ld -native -inline ${BENCHMARK}/${BITCODE} ${CORELAB_LIB_DIR}/sw_queue.bc ${CORELAB_LIB_DIR}/libtpool.so -lpthread $LINKING_POSTOPTIONS -o ${BENCHMARK}/${OUTPUT}

  if test "$?" != 0; then
    echo "Error running llvm-ld"
    exit 1
  fi
  echo
  
  echo " "
  echo "> Executable for ${BENCHMARK} sucessfully created in ${BENCHMARK}"
  
